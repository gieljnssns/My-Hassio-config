substitutions:
  devicename: smappee_l2
  platform: ESP8266
  board: nodemcuv2
  upper_devicename: Smappee L2
  ssid: !secret ssid-waskot
  manual_ip: 192.168.89.115

packages:
  wifi: !include common/wifi-waskot.yaml
  device_base: !include common/device_base.yaml

uart:
  - id: ubus
    tx_pin: GPIO1
    rx_pin: GPIO3
    baud_rate: 9600
    stop_bits: 1

modbus:
  id: mbus
  uart_id: ubus

sun:
  latitude: !secret latitude
  longitude: !secret longitude
  
sensor:
  - platform: sun
    name: Sun Elevation
    type: elevation
    id: elevation
    internal: true
    
  - platform: pzemac
    address: 1
    modbus_id: mbus
    current:
      #name: "L2 stroom"
      id: currentL2
    voltage:
      #name: "L2 spanning"
      id: voltageL2
    energy:
      #name: "L2 energie"
      id: energyL2
    power:
      # name: "L2_test"
      id: powerL2
    frequency:
      #name: "L2 frequentie"
      id: L2freq
    power_factor:
      #name: "L2 cos phi"
      id: L2cosphi
    update_interval: 4s
  - platform: pzemac
    address: 2
    modbus_id: mbus
    current:
      #name: "S2 stroom"
      id: currentS2
    voltage:
      #name: "S2 spanning"
      id: voltageS2
    energy:
      #name: "S2 energie"
      id: energyS2
    power:
      # name: "S2_test"
      id: powerS2
    frequency:
      #name: "S2 frequentie"
      id: S2freq
    power_factor:
      #name: "S2 cos phi"
      id: S2cosphi
    update_interval: 4s
  - platform: pzemac
    address: 3
    modbus_id: mbus
    current:
      #name: "V2 stroom"
      id: currentV2
    voltage:
      #name: "V2 spanning"
      id: voltageV2
    energy:
      #name: "V2 energie"
      id: energyV2
    power:
      # name: "V2_test"
      id: powerV2
    frequency:
      #name: "V2 frequentie"
      id: V2freq
    power_factor:
      #name: "V2 cos phi"
      id: V2cosphi
    update_interval: 4s
  ###  Template sensors  ###
  # - platform: template
  #   name: "L2 schijnbaar vermogen"
  #   id: reactive_power_L2
  #   update_interval: 2s
  #   unit_of_measurement: "VA"
  #   # internal: true
  #   lambda: |-
  #     return (id(currentL2).state * id(voltageL2).state);
  # - platform: template
  #   name: "S2 schijnbaar vermogen"
  #   id: reactive_power_S2
  #   update_interval: 2s
  #   unit_of_measurement: "VA"
  #   # internal: true
  #   lambda: |-
  #     return (id(currentS2).state * id(voltageS2).state);
  # - platform: template
  #   name: "V2 schijnbaar vermogen"
  #   id: reactive_power_V2
  #   update_interval: 2s
  #   unit_of_measurement: "VA"
  #   # internal: true
  #   lambda: |-
  #     return (id(currentV2).state * id(voltageV2).state);
  
  - platform: template
    name: "V2 vermogen"
    id: powerV2_test2
    update_interval: 2s
    unit_of_measurement: "W"
    # internal: true
    lambda: !lambda |-
      if (( -6 < (id(powerL2).state - id(powerS2).state) - id(powerV2).state && (id(powerL2).state - id(powerS2).state) - id(powerV2).state < 6 )  || (id(elevation).state < 0))   {
        return id(powerL2).state;
      } else {
        return id(powerV2).state;
      }
    on_value:
      then:
        - if:
            condition:
              # Should return either true or false
              lambda: |-
                return x == id(powerL2).state;
            then:
              - sensor.template.publish:
                  id: powerS2_test2
                  state: 0
            else:
              - sensor.template.publish:
                  id: powerS2_test2
                  state: !lambda 'return id(powerS2).state;'
              # - logger.log: 
              #     format: "(L2 - S2) - V2 = %.1f"
              #     args: [ '(id(powerL2).state - id(powerS2).state) - id(powerV2).state' ]
  
  
  - platform: template
    name: "S2 vermogen"
    id: powerS2_test2
    update_interval: 2s
    unit_of_measurement: "W"
  
  - platform: template
    name: "L2 vermogen"
    id: powerL2_test2
    update_interval: 2s
    unit_of_measurement: "W"
    lambda: !lambda |-
      if (id(powerS2_test2).state <= id(powerV2_test2).state)  {
        return ( -1 * id(powerL2).state);
      } else {
        return id(powerL2).state;
      }
    on_value:
      then:
        - if:
            condition:
              # Should return either true or false
              lambda: |-
                return x < 0;
            then:
              - sensor.template.publish:
                  id: grid_production_test2
                  state: 0
              - sensor.template.publish:
                  id: grid_consumption_test2
                  state: !lambda 'return id(powerL2).state;'
            else:
              - sensor.template.publish:
                  id: grid_production_test2
                  state: !lambda 'return id(powerL2).state;'
              - sensor.template.publish:
                  id: grid_consumption_test2
                  state: 0
    
  - platform: template
    name: "L2 net terugsturen"
    id: grid_production_test2
    update_interval: 2s
    unit_of_measurement: "W"
  
  - platform: template
    name: "L2 net afname"
    id: grid_consumption_test2
    update_interval: 2s
    unit_of_measurement: "W"
    
  # - platform: template
  #   name: "L2-S2-V2"
  #   id: l_s_v
  #   update_interval: 2s
  #   unit_of_measurement: "W"
  #   lambda: !lambda |-
  #     return (id(powerL2).state - id(powerS2).state) - id(powerV2).state;

