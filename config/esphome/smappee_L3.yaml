substitutions:
  devicename: smappee-l3
  platform: ESP8266
  board: nodemcuv2
  upper_devicename: Smappee L3
  ssid: !secret ssid-waskot
  manual_ip: 192.168.79.150

packages:
  # wifi: !include common/wifi-waskot.yaml
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml

uart:
  - id: ubus
    tx_pin: GPIO1
    rx_pin: GPIO3
    baud_rate: 9600
    stop_bits: 1

modbus:
  id: mbus
  uart_id: ubus

sun:
  latitude: !secret latitude
  longitude: !secret longitude

binary_sensor:
  - platform: homeassistant
    name: ${upper_devicename} huawei has power
    id: huawei_has_power
    entity_id: binary_sensor.huawei_has_power
  - platform: homeassistant
    name: ${upper_devicename} solaredge has power
    id: solaredge_has_power
    entity_id: binary_sensor.solaredge_has_power
  
sensor:
  - platform: sun
    name: Sun Elevation
    type: elevation
    id: elevation
    internal: true
    
  - platform: pzemac
    address: 1
    modbus_id: mbus
    current:
      name: "L3 stroom"
      id: currentL3
      internal: true
    voltage:
      name: "L3 spanning"
      id: voltageL3
      internal: true
    energy:
      id: energyL3
      internal: true
    power:
      name: "L3"
      id: powerL3
      internal: true
    frequency:
      id: L3freq
      internal: true
    power_factor:
      id: L3cosphi
      internal: true
    update_interval: 2s
  - platform: pzemac
    address: 2
    modbus_id: mbus
    current:
      name: "S3 stroom"
      id: currentS3
      internal: true
    voltage:
      name: "S3 spanning"
      id: voltageS3
      internal: true
    energy:
      id: energyS3
      internal: true
    power:
      name: "S3"
      id: powerS3
      # internal: true
    frequency:
      id: S3freq
      internal: true
    power_factor:
      id: S3cosphi
      internal: true
    update_interval: 2s
  - platform: pzemac
    address: 3
    modbus_id: mbus
    current:
      name: "V3 stroom"
      id: currentV3
      internal: true
    voltage:
      name: "V3 spanning"
      id: voltageV3
      internal: true
    energy:
      id: energyV3
      internal: true
    power:
      name: "V3"
      id: powerV3
      # internal: true
    frequency:
      id: V3freq
      internal: true
    power_factor:
      id: V3cosphi
      internal: true
    update_interval: 2s

  ###  Template sensors  ###
  - platform: template
    name: "V3 vermogen"
    id: powerV3_test2
    update_interval: 2s
    unit_of_measurement: "W"
    lambda: !lambda |-
      if (id(huawei_has_power).state || id(solaredge_has_power).state){
        return id(powerV3).state;
      } else {
        return id(powerL3).state;
      }
    # lambda: !lambda |-
    #   if (( -7 < (id(powerL3).state - id(powerS3).state) - id(powerV3).state && (id(powerL3).state - id(powerS3).state) - id(powerV3).state < 7 )  || (id(elevation).state < 0))  {
    #     return id(powerL3).state;
    #   } else {
    #     return id(powerV3).state;
    #   }
    # on_value:
    #   then:
    #     - if:
    #         condition:
    #           # Should return either true or false
    #           lambda: |-
    #             return x == id(powerL3).state;
    #         then:
    #           - sensor.template.publish:
    #               id: powerS3_test2
    #               state: 0
    #         else:
    #           - sensor.template.publish:
    #               id: powerS3_test2
    #               state: !lambda 'return id(powerS3).state;'
    #           # - logger.log: 
    #           #     format: "(L3 - S3) - V3 = %.1f"
    #           #     args: [ '(id(powerL3).state - id(powerS3).state) - id(powerV3).state' ]
  
  
  - platform: template
    name: "S3 vermogen"
    id: powerS3_test2
    update_interval: 2s
    unit_of_measurement: "W"
    lambda: !lambda |-
      if (id(huawei_has_power).state || id(solaredge_has_power).state){
        return id(powerS3).state;
      } else {
        return 0;
      }
  
  - platform: template
    name: "L3 vermogen"
    id: powerL3_test2
    update_interval: 2s
    unit_of_measurement: "W"
    lambda: !lambda |-
      if (id(powerS3_test2).state <= id(powerV3_test2).state)  {
        return ( -1 * id(powerL3).state);
      } else {
        return id(powerL3).state;
      }
    on_value:
      then:
        - if:
            condition:
              # Should return either true or false
              lambda: |-
                return x < 0;
            then:
              - sensor.template.publish:
                  id: grid_production_test2
                  state: 0
              - sensor.template.publish:
                  id: grid_consumption_test2
                  state: !lambda 'return id(powerL3).state;'
            else:
              - sensor.template.publish:
                  id: grid_production_test2
                  state: !lambda 'return id(powerL3).state;'
              - sensor.template.publish:
                  id: grid_consumption_test2
                  state: 0
    
  - platform: template
    name: "L3 net terugsturen"
    id: grid_production_test2
    update_interval: 2s
    unit_of_measurement: "W"
  
  - platform: template
    name: "L3 net afname"
    id: grid_consumption_test2
    update_interval: 2s
    unit_of_measurement: "W"
    
    

