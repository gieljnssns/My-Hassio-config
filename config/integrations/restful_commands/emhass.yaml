naive_mpc_optim:
  url: http://localhost:5003/action/naive-mpc-optim
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "prod_price_forecast": {{
        ([state_attr('sensor.prod_price_forecast_list', 'extra') | float] +
        state_attr('sensor.prod_price_forecast_list', 'list')[:states('sensor.prediction_horizon') | int - 1]) | tojson
        }},
      "load_cost_forecast": {{
        (state_attr('sensor.cost_forecast_list', 'list')[:states('sensor.prediction_horizon') | int]) | tojson
        }},
      "pv_power_forecast": {{
        ([states('sensor.huidige_opbrengst')|int(0)] +
        state_attr('sensor.pv_power_forecast_list', 'list')[:states('sensor.prediction_horizon') | int - 1]) | tojson
        }},
      "prediction_horizon": {{ states('sensor.prediction_horizon') | int }},
      "alpha": 1,
      "beta": 0,
      "num_def_loads": 5,
      "p_deferrable_nom": [2000, 2000, 1700, 900, 2000],
      "def_total_hours": [
        {{  states('sensor.wasmachien_uren') | float(0) }},
        {{  states('sensor.droogkast_uren') | float(0) }},
        {{  states('sensor.afwasmachien_uren') | float(0) }},
        {{  states('sensor.warmtepompboiler_uren') | float(0) }},
        {{  states('sensor.warmtepomp_uren') | float(0) }}],
      "set_def_constant":[true, true, true, false, false],
      "def_end_timestep": [
        {{  states('sensor.wasmachien_end_timesteps') | int(0) }},
        {{  states('sensor.droogkast_end_timesteps') | int(0) }},
        {{  states('sensor.afwasmachien_end_timesteps') | int(0) }},
        {{  states('sensor.warmtepompboiler_end_timesteps') | int(0) }},
        {{  states('sensor.warmtepomp_end_timesteps') | int(0) }}],
      "def_current_state": [
        {{  "true" if is_state('input_boolean.emhass_wasmachien', "on") else "false" }}, 
        {{  "true" if is_state('input_boolean.emhass_droogkast', "on") else "false" }}, 
        {{  "true" if is_state('input_boolean.emhass_afwasmachien', "on") else "false" }}, 
        {{  "true" if is_state('input_boolean.emhass_warmtepompboiler', "on") else "false" }}, 
        {{  "true" if is_state('input_boolean.emhass_warmtepomp', "on") else "false" }}]
    }

fit_heating_hours:
  url: http://localhost:5003/action/regressor-model-fit
  method: POST
  content_type: "application/json"
  payload: >-
    {
    "csv_file": "prediction.csv",
    "features":["dd", "solar"],
    "target": "hour",
    "regression_model": "RandomForestRegression",
    "model_type": "heating_dd",
    "timestamp": "timestamp",
    "date_features": ["month", "day_of_week"]
    }
predict_heating_hours:
  url: http://localhost:5003/action/regressor-model-predict
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "model_type": "heating_dd",
      "mlr_predict_entity_id": "sensor.voorspelde_uren",
      "mlr_predict_unit_of_measurement": "h",
      "mlr_predict_friendly_name": "Voorspelde uren",
      "new_values": [{{states("sensor.degree_day_prediction")}}, {{states("sensor.solcast_solaredge_forecast_tomorrow")}}, {{now().month}}, {{now().weekday()}}]
    }

fit_heating_hours_gradientboosting:
  url: http://localhost:5003/action/regressor-model-fit
  method: POST
  content_type: "application/json"
  payload: >-
    {
    "csv_file": "prediction.csv",
    "features":["dd", "solar"],
    "target": "hour",
    "regression_model": "GradientBoostingRegression",
    "model_type": "heating_dd_gradientboosting",
    "timestamp": "timestamp",
    "date_features": ["month", "day_of_week"]
    }
predict_heating_hours_gradientboosting:
  url: http://localhost:5003/action/regressor-model-predict
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "model_type": "heating_dd_gradientboosting",
      "mlr_predict_entity_id": "sensor.voorspelde_uren_gradientboosting",
      "mlr_predict_unit_of_measurement": "h",
      "mlr_predict_friendly_name": "Voorspelde uren GradientBoosting",
      "new_values": [{{states("sensor.degree_day_prediction")}}, {{states("sensor.solcast_solaredge_forecast_tomorrow")}}, {{now().month}}, {{now().weekday()}}]
    }

fit_heating_hours_adaboost:
  url: http://localhost:5003/action/regressor-model-fit
  method: POST
  content_type: "application/json"
  payload: >-
    {
    "csv_file": "prediction.csv",
    "features":["dd", "solar"],
    "target": "hour",
    "regression_model": "AdaBoostRegression",
    "model_type": "heating_dd_adaboost",
    "timestamp": "timestamp",
    "date_features": ["month", "day_of_week"]
    }
predict_heating_hours_adaboost:
  url: http://localhost:5003/action/regressor-model-predict
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "model_type": "heating_dd_adaboost",
      "mlr_predict_entity_id": "sensor.voorspelde_uren_adaboost",
      "mlr_predict_unit_of_measurement": "h",
      "mlr_predict_friendly_name": "Voorspelde uren AdaBoost",
      "new_values": [{{states("sensor.degree_day_prediction")}}, {{states("sensor.solcast_solaredge_forecast_tomorrow")}}, {{now().month}}, {{now().weekday()}}]
    }

forecast_model_fit_load_zonder_wp:
  url: http://localhost:5003/action/forecast-model-fit
  method: POST
  content_type: "application/json"
  timeout: 300
  payload: >-
    {
      "days_to_retrieve": {{ states('sensor.days_to_retrieve') | int(0) }},
      "model_type": "load_forecast",
      "var_model": "sensor.huidig_verbruik_zonder_wp",
      "sklearn_model": "KNeighborsRegressor",
      "num_lags": 48,
      "split_date_delta": "48h",
      "perform_backtest": "True"
    }

forecast_model_predict_load_zonder_wp:
  url: http://localhost:5003/action/forecast-model-predict
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "model_type": "load_forecast",
      "var_model": "sensor.huidig_verbruik_zonder_wp",
      "model_predict_publish": "True",
      "model_predict_entity_id": "sensor.emhass_load_zonder_wp_custom_model",
      "model_predict_unit_of_measurement": "W",
      "model_predict_friendly_name": "Warmtepompboiler custom model"
    }

forecast_model_tune_load_zonder_wp:
  url: http://localhost:5003/action/forecast-model-tune
  method: POST
  content_type: "application/json"
  timeout: 1800
  payload: >-
    {
      "model_type": "load_forecast",
      "var_model": "sensor.huidig_verbruik_zonder_wp",
      "days_to_retrieve": {{ states('sensor.days_to_retrieve') | int(0) }}
    }

publish_data:
  url: http://localhost:5003/action/publish-data
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "custom_deferrable_forecast_id": [
        {"entity_id": "sensor.emhass_wasmachien",
          "unit_of_measurement": "W",
          "friendly_name": "Emhass wasmachien"},
        {"entity_id": "sensor.emhass_droogkast",
          "unit_of_measurement": "W",
          "friendly_name": "Emhass droogkast"},
        {"entity_id": "sensor.emhass_afwasmachien",
          "unit_of_measurement": "W",
          "friendly_name": "Emhass afwasmachien"},
        {"entity_id": "sensor.emhass_warmtepompboiler",
          "unit_of_measurement": "W",
          "friendly_name": "Emhass warmtepompboiler"},
        {"entity_id": "sensor.emhass_warmtepomp",
          "unit_of_measurement": "W",
          "friendly_name": "Emhass warmtepomp"}],
      "custom_pv_forecast_id": {
        "entity_id": "sensor.emhass_pv_forecast",
        "unit_of_measurement": "W",
        "friendly_name": "Emhass pv forecast"},
      "custom_load_forecast_id": {
        "entity_id": "sensor.emhass_load_forecast",
        "unit_of_measurement": "W",
        "friendly_name": "Emhass load forecast"},
      "custom_grid_forecast_id": {
        "entity_id": "sensor.emhass_grid_forecast",
        "unit_of_measurement": "W",
        "friendly_name": "Emhass grid forecast"},
      "custom_unit_load_cost_id": {
        "entity_id": "sensor.emhass_load_cost",
        "unit_of_measurement": "€/kWh",
        "friendly_name": "Emhass load cost"},
      "custom_unit_prod_price_id": {
        "entity_id": "sensor.emhass_prod_price",
        "unit_of_measurement": "€/kWh",
        "friendly_name": "Emhass production price"},
      "custom_pv_curtailment_id": {
        "entity_id": "sensor.emhass_curtailment",
        "unit_of_measurement": "W",
        "friendly_name": "Emhass curtailment"}
    }
