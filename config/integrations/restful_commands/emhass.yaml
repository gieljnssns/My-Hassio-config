naive_mpc_optim:
  url: http://localhost:5001/action/naive-mpc-optim
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "prod_price_forecast": {{ 
        [state_attr('sensor.prod_price_forecast_list', 'extra') | float] +
        state_attr('sensor.prod_price_forecast_list', 'list')[:state_attr('sensor.real_cost_forecast_list', 'length')] }},
      "load_cost_forecast": {{ 
        [states('sensor.nordpool_kwh_be_eur') | float] +
        state_attr('sensor.real_cost_forecast_list', 'list')[:state_attr('sensor.real_cost_forecast_list', 'length')] }},
      "pv_power_forecast": {{
        [states('sensor.huidige_opbrengst')|int(0)] +
        state_attr('sensor.pv_power_forecast_list', 'list')[:state_attr('sensor.real_cost_forecast_list', 'length')] }},
      "prediction_horizon": {{ state_attr('sensor.real_cost_forecast_list', 'length') + 1 }},
      "alpha": 1,
      "beta": 0,
      "num_def_loads": 4
      "P_deferrable_nom": [2000, 2000, 1700, 1100],
      "def_total_hours": [
        {{  states('sensor.wasmachien_uren') | int }},
        {{  states('sensor.droogkast_uren') | int }},
        {{  states('sensor.afwasmachien_uren') | int }},
        {{  states('sensor.warmtepompboiler_uren') | int }}],
      "treat_def_as_semi_cont": [1, 1, 1, 1],
      "set_def_constant": [True, True, True, True]
    }

forecast_model_fit_load_zonder_wp:
  url: http://localhost:5001/action/forecast-model-fit
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "days_to_retrieve": 15,
      "model_type": "load_zonder_wp_forecast",
      "var_model": "sensor.huidig_verbruik_zonder_wp",
      "sklearn_model": "KNeighborsRegressor",
      "num_lags": 48,
      "split_date_delta": "48h",
      "perform_backtest": "True"
    }

forecast_model_predict_load_zonder_wp:
  url: http://localhost:5001/action/forecast-model-predict
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "model_type": "load_zonder_wp_forecast",
      "var_model": "sensor.huidig_verbruik_zonder_wp",
      "days_to_retrieve": 15,
      "model_predict_publish": "True",
      "model_predict_entity_id": "sensor.emhass_load_zonder_wp_custom_model",
      "model_predict_unit_of_measurement": "W",
      "model_predict_friendly_name": "Load custom model"
    }

forecast_model_tune_load_zonder_wp:
  url: http://localhost:5001/action/forecast-model-tune
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "model_type": "load_zonder_wp_forecast",
      "var_model": "sensor.huidig_verbruik_zonder_wp",
      "days_to_retrieve": 15
    }

publish_data:
  url: http://localhost:5001/action/publish-data
  method: POST
  content_type: "application/json"
  payload: >-
    {
      "custom_deferrable_forecast_id": [
        {"entity_id": "sensor.emhass_wasmachien",
          "unit_of_measurement": "W",
          "friendly_name": "Emhass wasmachien"},
        {"entity_id": "sensor.emhass_droogkast",
          "unit_of_measurement": "W",
          "friendly_name": "Emhass droogkast"},
        {"entity_id": "sensor.emhass_afwasmachien",
          "unit_of_measurement": "W",
          "friendly_name": "Emhass afwasmachien"},
        {"entity_id": "sensor.emhass_warmtepompboiler",
          "unit_of_measurement": "W",
          "friendly_name": "Emhass warmtepompboiler"
        }
      ],
      "custom_pv_forecast_id": {
        "entity_id": "sensor.emhass_pv_forecast",
        "unit_of_measurement": "W",
        "friendly_name": "Emhass pv forecast"},
      "custom_load_forecast_id": {
        "entity_id": "sensor.emhass_load_forecast",
        "unit_of_measurement": "W",
        "friendly_name": "Emhass load forecast"},
      "custom_grid_forecast_id": {
        "entity_id": "sensor.emhass_grid_forecast",
        "unit_of_measurement": "W",
        "friendly_name": "Emhass grid forecast"},
      "custom_unit_load_cost_id": {
        "entity_id": "sensor.emhass_load_cost",
        "unit_of_measurement": "€/kWh",
        "friendly_name": "Emhass load cost"},
      "custom_unit_prod_price_id": {
        "entity_id": "sensor.emhass_prod_price",
        "unit_of_measurement": "€/kWh",
        "friendly_name": "Emhass production price"}
    }
