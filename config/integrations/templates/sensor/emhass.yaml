- sensor:
    - name: "Wasmachien uren"
      unique_id: c7278411-c766-4fcd-81ea-0604db1b1f76
      unit_of_measurement: "uur"
      state: >
        {% if states("input_boolean.wasmachien_starten") == 'on' %}
          {% if states("switch.wasmachien") == 'off' %}
            2
          {% elif states("input_boolean.emhass_wasmachien") == 'on' %}
            {% if (2 - ((as_timestamp(now()) - states("sensor.wasmachien_is_gestart_op") | float(0)) / 3600) | round(1)) | float(0) > 0  %}
              {{ 2 - ((as_timestamp(now()) - states("sensor.wasmachien_is_gestart_op") | float(0)) / 3600) | round(1) }}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}

    - name: "Droogkast uren"
      unique_id: 59e14f81-ccd8-4099-b08d-d21c53ff3c70
      unit_of_measurement: "uur"
      state: >
        {% if states("input_boolean.droogkast_starten") == 'on' %}
          {% if states("switch.droogkast") == 'off' and states("input_boolean.wasmachien_starten") == 'on' and states("input_boolean.afwasmachien_starten") == 'on' %}
            6
          {% elif states("switch.droogkast") == 'off' and states("input_boolean.wasmachien_starten") == 'on' %}
            4
          {% elif states("switch.droogkast") == 'off' and states("input_boolean.afwasmachien_starten") == 'on' %}
            4
          {% elif states("switch.droogkast") == 'off' %}
            2
          {% elif states("input_boolean.emhass_droogkast") == 'on'%}
            {% if (2 - ((as_timestamp(now()) - states("sensor.droogkast_is_gestart_op") | float(0)) / 3600) | round(1)) | float(0) > 0  %}
              {{ 2 - ((as_timestamp(now()) - states("sensor.droogkast_is_gestart_op") | float(0)) / 3600) | round(1) }}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}

    - name: "Afwasmachien uren"
      unique_id: 062928fa-46a0-407c-9947-085b5278ec96
      unit_of_measurement: "uur"
      state: >
        {% if states("input_boolean.afwasmachien_starten") == 'on'%}
          {% if states("switch.afwasmachien") == 'off'%}
            2.5
          {% elif states("input_boolean.emhass_afwasmachien") == 'on'%}
            {% if (2.5 - ((as_timestamp(now()) - states("sensor.afwasmachien_is_gestart_op") | float(0)) / 3600) | round(1)) | float(0) > 0  %}
              {{ 2.5 - ((as_timestamp(now()) - states("sensor.afwasmachien_is_gestart_op") | float(0)) / 3600) | round(1) }}
            {% else %}
              0
            {% endif %}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}

    - name: "Warmtepomp uren"
      unique_id: 5c252e9e-ae09-4100-aace-8bb8d4149e8e
      unit_of_measurement: "uur"
      state: >
        {% if states("input_boolean.verwarming_starten") == 'on' %}
          {{ (states("sensor.uur_per_degree_day_daily") | float(0) *
              states("sensor.degree_day_prediction") | float(0)) | round(1) }}
        {% else %}
          0
        {% endif %}

    - name: Warmtepompboiler uren
      unique_id: 8225bcd3-62ca-40af-8891-ba06a95eed91
      unit_of_measurement: "uur"
      availability: >-
        {{ has_value("switch.warm_water") and 
          has_value("input_boolean.warm_water_starten") and
          has_value("input_boolean.op_verlof") and
          has_value("binary_sensor.warmtepompboiler_aan") and
          has_value("sensor.warmtepompboiler_is_gestart_op") and
          has_value("sensor.thermostaat") }}
      state: >
        {% macro max(X, Y) -%} {{X|float if X|float > Y|float else Y|float }} {%- endmacro %}
        {% if states("input_boolean.op_verlof") == 'off' %}
          {% if states("sensor.solcast_solaredge_forecast_remaining_today") | float(0) > 2 %}
            {% if states("input_boolean.warm_water_starten") == 'on' %}
              {% if states("switch.warm_water") == 'on' and states("binary_sensor.warmtepompboiler_aan") == 'off' %}
                {{  max(0, ((51 - (states("sensor.thermostaat") | float(0))) / 4) | round(1))  }}
              {% elif (as_timestamp(now()) - states("sensor.warmtepompboiler_is_gestart_op") | float(0)) < 3600 %}
                {{  max(0, ((51 - (states("sensor.thermostaat") | float(0))) / 4) | round(1))  }}
              {% elif states("binary_sensor.warmtepompboiler_aan") == 'on' %}
                {{  max(0, ((51 - (states("sensor.thermostaat") | float(0))) / 4.5) | round(1))  }}
              {% else %}
                {{  max(0, ((51 - (states("sensor.thermostaat") | float(0))) / 4) | round(1))  }}
              {% endif %}
            {% else %}
              0
            {% endif %}
          {% else %}
            {% if states("input_boolean.warm_water_starten") == 'on' %}
              {% if states("switch.warm_water") == 'on' and states("binary_sensor.warmtepompboiler_aan") == 'off' %}
                {{  max(0, ((49 - (states("sensor.thermostaat") | float(0))) / 4) | round(1))  }}
              {% elif (as_timestamp(now()) - states("sensor.warmtepompboiler_is_gestart_op") | float(0)) < 3600 %}
                {{  max(0, ((49 - (states("sensor.thermostaat") | float(0))) / 4) | round(1))  }}
              {% elif states("binary_sensor.warmtepompboiler_aan") == 'on' %}
                {{  max(0, ((49 - (states("sensor.thermostaat") | float(0))) / 4.5) | round(1))  }}
              {% else %}
                {{ max(0, ((49 - (states("sensor.thermostaat") | float(0))) / 4) | round(1))  }}
              {% endif %}
            {% else %}
              0
            {% endif %}
          {% endif %}
        {% else %}
          {% if states("input_boolean.warm_water_starten") == 'on' %}
            {% if states("switch.warm_water") == 'on' and states("binary_sensor.warmtepompboiler_aan") == 'off' %}
              {{  max(0, ((46 - (states("sensor.thermostaat") | float(0))) / 4) | round(1))  }}
            {% elif (as_timestamp(now()) - states("sensor.warmtepompboiler_is_gestart_op") | float(0)) < 3600 %}
              {{  max(0, ((46 - (states("sensor.thermostaat") | float(0))) / 4) | round(1))  }}
            {% elif states("binary_sensor.warmtepompboiler_aan") == 'on' %}
              {{  max(0, ((46 - (states("sensor.thermostaat") | float(0))) / 4.5) | round(1))  }}
            {% else %}
              {{  max(0, ((46 - (states("sensor.thermostaat") | float(0))) / 4) | round(1))  }}
            {% endif %}
          {% else %}
            0
          {% endif %}
        {% endif %}
    - name: Pv power forecast list
      unique_id: 6bc0c511-9c6f-4778-b13e-a20e3646a7e5
      state: >
        {{ states("sensor.solcast_solaredge_forecast_today")}}
      availability: >-
        {{ has_value("sensor.solcast_solaredge_forecast_today") }}
      attributes:
        list: >
          {{  (state_attr('sensor.solcast_solaredge_forecast_today', 'detailedForecast')
                |selectattr('period_start','gt',utcnow())
                |map(attribute='pv_estimate')
                |map('multiply',1000)
                |map('int')
                |list
            + state_attr('sensor.solcast_solaredge_forecast_tomorrow', 'detailedForecast')
                |selectattr('period_start','gt',utcnow())
                |map(attribute='pv_estimate')
                |map('multiply',1000)
                |map('int')
                |list)[:48]
                }}

    - name: Prod price forecast list
      unique_id: c081ad21-6e07-4346-82e3-d392b4a251d6
      state: >
        {{ states("sensor.solcast_solaredge_forecast_today")}}
      availability: >-
        {{ has_value("sensor.solcast_solaredge_forecast_today") }}
      unit_of_measurement: "EUR/kWh"
      attributes:
        list: >
          {%- set list =  (state_attr('sensor.solcast_solaredge_forecast_today', 'detailedForecast')
              |selectattr('period_start','gt',utcnow())
              |map(attribute='period_start')
              |list
            + state_attr('sensor.solcast_solaredge_forecast_tomorrow', 'detailedForecast')
              |selectattr('period_start','gt',utcnow())
              |map(attribute='period_start')
              |list)[:48]
              -%}
          {%- set new_list = namespace(all=[]) %}
          {%- for i in range (list | length) %}
            {%- set hour = (list[i].hour) | int%}
            {%- if hour in [13, 14, 15, 16, 17] %}
              {%- set new_list.all = new_list.all + [ -0.11 ] %}
            {%- else %}
              {%- set new_list.all = new_list.all + [ -0.11 ] %}
            {%- endif %}
          {%- endfor %}
          {{ (new_list.all)[:48]}}
        extra: >
          -0.11

    - name: Cost forecast list
      unique_id: 1e92ec2a-1886-4322-8cb9-7cef05077dec
      state: >
        {{ states("sensor.solcast_solaredge_forecast_today")}}
      availability: >-
        {{ has_value("sensor.solcast_solaredge_forecast_today") }}
      unit_of_measurement: "EUR/kWh"
      attributes:
        list: >
          {%- set list =  (state_attr('sensor.solcast_solaredge_forecast_today', 'detailedForecast')
              |selectattr('period_start','gt',utcnow())
              |map(attribute='period_start')
              |list
            + state_attr('sensor.solcast_solaredge_forecast_tomorrow', 'detailedForecast')
              |selectattr('period_start','gt',utcnow())
              |map(attribute='period_start')
              |list)[:48]
              -%}
          {%- set new_list = namespace(all=[]) %}
          {%- for i in range (list | length) %}
            {%- set hour = (list[i].hour) | int%}
            {%- if hour in [7, 8, 9, 16, 17, 18] %}
              {%- set new_list.all = new_list.all + [ 0.174497535 ] %}
            {%- else %}
              {%- set new_list.all = new_list.all + [ 0.164497535 ] %}
            {%- endif %}
          {%- endfor %}
          {{ (new_list.all)[:48]}}

    - name: Real cost forecast list
      unique_id: b826cf88-14b2-4a57-9727-6b74b0e58032
      state: >
        {{ states("sensor.nordpool_kwh_be_eur")}}
      availability: >-
        {{ has_value("sensor.nordpool_kwh_be_eur") }}
      unit_of_measurement: "EUR/kWh"
      attributes:
        list: >
          {%- set list = (state_attr('sensor.nordpool_kwh_be_eur', 'raw_today')
                |selectattr('start','gt',utcnow())
                |map(attribute='value')
                |list
            + state_attr('sensor.nordpool_kwh_be_eur', 'raw_tomorrow')
                |selectattr('start','gt',utcnow())
                |map(attribute='value')
                |list)[:48] -%}
          {%- set new_list = namespace(all=[]) %}
          {%- for i in range (list | length) %}
            {%- if i == 0 %}
              {%- if now().minute | int < 30 %}
                {%- set new = [states('sensor.nordpool_kwh_be_eur') | float] %}
                {%- set new_list.all = new_list.all + new -%}
              {%- else %}
                {%- set new = [list[i]] + [list[i]] %}
                {%- set new_list.all = new_list.all + new -%}
              {%- endif %}
            {%- else %}
              {%- set new = [list[i]] + [list[i]] %}
              {%- set new_list.all = new_list.all + new -%}
            {%- endif %}
          {%- endfor %}
          {{ (new_list.all)[:48]}}

        length: >
          {% if state_attr('sensor.real_cost_forecast_list', 'list') is iterable %}
            {% set len = state_attr('sensor.real_cost_forecast_list', 'list') | length %}
          {% else %}
            {% set len = 48 %}
          {% endif %}
          {{ len }}

    - name: Verwarming startuur
      unique_id: ceff5121-3392-4bac-8fa5-a8cec3e3d331
      state: >
        {%- from 'easy_time.jinja' import easy_relative_time %}
        {%- set load = (state_attr('sensor.emhass_warmtepomp', 'deferrables_schedule')
                |map(attribute='emhass_warmtepomp')
                |list) %}
        {%- set time = (state_attr('sensor.emhass_warmtepomp', 'deferrables_schedule')
                |map(attribute='date')
                |list) %}
        {% if is_state("input_boolean.emhass_warmtepomp", "on") %}
          Staat op
        {% else %}
          {%- set new_list = namespace(all=[]) %}
            {%- for i in range (load | length) %}
              {%- if load[i] | float > 1 %}
                {{ (easy_relative_time(time [i], max_period='minute', language='nl')) }}
                {%- break -%}
              {%- endif %}
            {%- endfor %}
          {% endif %}
      availability: >-
        {{ has_value("sensor.emhass_warmtepomp") }}

    - name: Warm water startuur
      unique_id: f4450d07-ad80-4ed5-a96a-852c84fec6ca
      state: >
        {%- from 'easy_time.jinja' import easy_relative_time %}
        {%- set load = (state_attr('sensor.emhass_warmtepompboiler', 'deferrables_schedule')
                |map(attribute='emhass_warmtepompboiler')
                |list) %}
        {%- set time = (state_attr('sensor.emhass_warmtepompboiler', 'deferrables_schedule')
                |map(attribute='date')
                |list) %}
        {% if is_state("input_boolean.emhass_warmtepompboiler", "on") %}
          Staat op
        {% else %}
          {%- set new_list = namespace(all=[]) %}
            {%- for i in range (load | length) %}
              {%- if load[i] | float > 1 %}
                {{ (easy_relative_time(time [i], max_period='minute', language='nl')) }}
                {%- break -%}
              {%- endif %}
            {%- endfor %}
          {% endif %}
      availability: >-
        {{ has_value("sensor.emhass_warmtepompboiler") }}

    - name: Wasmachien startuur
      unique_id: 12e7093b-ea97-4f69-a47d-720106331e9f
      state: >
        {%- from 'easy_time.jinja' import easy_relative_time %}
        {%- set load = (state_attr('sensor.emhass_wasmachien', 'deferrables_schedule')
                |map(attribute='emhass_wasmachien')
                |list) %}
        {%- set time = (state_attr('sensor.emhass_wasmachien', 'deferrables_schedule')
                |map(attribute='date')
                |list) %}
        {% if is_state("input_boolean.emhass_wasmachien", "on") %}
          Staat op
        {% else %}
          {%- set new_list = namespace(all=[]) %}
            {%- for i in range (load | length) %}
              {%- if load[i] | float > 1 %}
                {{ (easy_relative_time(time [i], max_period='minute', language='nl')) }}
                {%- break -%}
              {%- endif %}
            {%- endfor %}
        {% endif %}
      availability: >-
        {{ has_value("sensor.emhass_wasmachien") }}

    - name: Droogkast startuur
      unique_id: de867de0-7b23-4b42-b646-ab2f00a1c1b2
      state: >
        {%- from 'easy_time.jinja' import easy_relative_time %}
        {%- set load = (state_attr('sensor.emhass_droogkast', 'deferrables_schedule')
                |map(attribute='emhass_droogkast')
                |list) %}
        {%- set time = (state_attr('sensor.emhass_droogkast', 'deferrables_schedule')
                |map(attribute='date')
                |list) %}
        {% if is_state("input_boolean.emhass_droogkast", "on") %}
          Staat op
        {% else %}
          {%- set new_list = namespace(all=[]) %}
            {%- for i in range (load | length) %}
              {%- if load[i] | float > 1 %}
                {{ (easy_relative_time(time [i], max_period='minute', language='nl')) }}
                {%- break -%}
              {%- endif %}
            {%- endfor %}
          {% endif %}
      availability: >-
        {{ has_value("sensor.emhass_droogkast") }}

    - name: Afwasmachien startuur
      unique_id: c38353a5-d1d8-4f10-a826-dbb2cf432c07
      state: >
        {%- from 'easy_time.jinja' import easy_relative_time %}
        {%- set load = (state_attr('sensor.emhass_afwasmachien', 'deferrables_schedule')
                |map(attribute='emhass_afwasmachien')
                |list) %}
        {%- set time = (state_attr('sensor.emhass_afwasmachien', 'deferrables_schedule')
                |map(attribute='date')
                |list) %}
        {% if is_state("input_boolean.emhass_afwasmachien", "on") %}
          Staat op
        {% else %}
          {%- set new_list = namespace(all=[]) %}
            {%- for i in range (load | length) %}
              {%- if load[i] | float > 1 %}
                {{ (easy_relative_time(time [i], max_period='minute', language='nl')) }}
                {%- break -%}
              {%- endif %}
            {%- endfor %}
          {% endif %}
      availability: >-
        {{ has_value("sensor.emhass_afwasmachien") }}

    - name: Prediction horizon
      unique_id: 39144142-06b5-4c2a-897a-d24b0c8fd2e4
      unit_of_measurement: 1/2u
      availability: >
        {{ state_attr('sensor.pv_power_forecast_list', 'list') | length | is_number and 
            states("sensor.wasmachien_end_timesteps") | is_number and 
            states("sensor.droogkast_end_timesteps") | is_number and 
            states("sensor.afwasmachien_end_timesteps") | is_number }}
      state: >
        {% macro max(X, Y) -%} {{X|int if X|int > Y|int else Y|int }} {%- endmacro %}
        {% macro min(X, Y) -%} {{X|int if X|int < Y|int else Y|int }} {%- endmacro %}
        {% set hour = now().hour %}
        {% set minutes = now().minute %}
        {% if state_attr('sensor.pv_power_forecast_list', 'list') is iterable %}
          {% set solar = state_attr('sensor.pv_power_forecast_list', 'list') | length %}
        {% else %}
          {% set solar = 48 %}
        {% endif %}
        {% set endstep = max(states('sensor.wasmachien_end_timesteps'), states('sensor.droogkast_end_timesteps')) %}
        {% set endstep = max(endstep, states('sensor.afwasmachien_end_timesteps')) %}

        {% if hour == 7 %}
          {{ min(48, max(endstep, min(solar, 34))) if minutes < 30 else min(48, max(endstep, min(solar, 33))) }}
        {% elif hour == 8 %}
          {{ min(48, max(endstep, min(solar, 32))) if minutes < 30 else min(48, max(endstep, min(solar, 31))) }}
        {% elif hour == 9 %}
          {{ min(48, max(endstep, min(solar, 30))) if minutes < 30 else min(48, max(endstep, min(solar, 29))) }}
        {% elif hour == 10 %}
          {{ min(48, max(endstep, min(solar, 28))) if minutes < 30 else min(48, max(endstep, min(solar, 27))) }}
        {% elif hour == 11 %}
          {{ min(48, max(endstep, min(solar, 26))) if minutes < 30 else min(48, max(endstep, min(solar, 25))) }}
        {% elif hour == 12 %}
          {{ min(48, max(endstep, min(solar, 24))) if minutes < 30 else min(48, max(endstep, min(solar, 23))) }}
        {% elif hour == 13 %}
          {{ min(48, max(endstep, min(solar, 22))) if minutes < 30 else min(48, max(endstep, min(solar, 21))) }}
        {% elif hour == 14 %}
          {{ min(48, max(endstep, min(solar, 20))) if minutes < 30 else min(48, max(endstep, min(solar, 19))) }}
        {% elif hour == 15 %}
          {{ min(48, max(endstep, min(solar, 18))) if minutes < 30 else min(48, max(endstep, min(solar, 17))) }}
        {% elif hour == 16 %}
          {{ min(48, max(endstep, min(solar, 16))) if minutes < 30 else min(48, max(endstep, min(solar, 15))) }}
        {% elif hour == 17 %}
          {{ min(48, max(endstep, min(solar, 14))) if minutes < 30 else min(48, max(endstep, min(solar, 13))) }}
        {% elif hour == 18 %}
          {{ min(48, max(endstep, min(solar, 12))) if minutes < 30 else min(48, max(endstep, min(solar, 11))) }}
        {% elif hour == 19 %}
          {{ min(48, max(endstep, min(solar, 10))) if minutes < 30 else min(48, max(endstep, min(solar, 9))) }}
        {% else %}
          {{ min(48, max(endstep, min(solar, 36))) }}
        {% endif %}

    - name: Wasmachien end timesteps
      unique_id: 0c02daa5-efbc-4156-9ada-f402a878194a
      unit_of_measurement: 1/2u
      state: >
        {% set steps = (((states("input_datetime.emhass_wasmachien_end_time") | as_timestamp) - now() | as_timestamp) / 1800) | int(0) %}
        {% macro max(X, Y) -%} {{X|int if X|int > Y|int else Y|int }} {%- endmacro %}
        {% if is_state("input_boolean.wasmachien_starten", "on") %}
          {{ max(steps, 0) }}
        {% else %}
          0
        {% endif %}

    - name: Droogkast end timesteps
      unique_id: 233e7698-caad-47b8-9917-5e228f3dabae
      unit_of_measurement: 1/2u
      state: >
        {% set steps = (((states("input_datetime.emhass_droogkast_end_time") | as_timestamp) - now() | as_timestamp) / 1800) | int(0) %}
        {% macro max(X, Y) -%} {{X|int if X|int > Y|int else Y|int }} {%- endmacro %}
        {% if is_state("input_boolean.droogkast_starten", "on") %}
          {{ max(steps, 0) }}
        {% else %}
          0
        {% endif %}

    - name: Afwasmachien end timesteps
      unique_id: 32c63c15-0e67-4686-8680-1a8ca97f4aff
      unit_of_measurement: 1/2u
      state: >
        {% set steps = (((states("input_datetime.emhass_afwasmachien_end_time") | as_timestamp) - now() | as_timestamp) / 1800) | int(0) %}
        {% macro max(X, Y) -%} {{X|int if X|int > Y|int else Y|int }} {%- endmacro %}
        {% if is_state("input_boolean.afwasmachien_starten", "on") %}
          {{ max(steps, 0) }}
        {% else %}
          0
        {% endif %}

    - name: Warmtepompboiler end timesteps
      unique_id: 108e2881-9ac7-49ef-baab-2631da9ab3f4
      unit_of_measurement: 1/2u
      state: >
        {% set solar = state_attr('sensor.pv_power_forecast_list', 'list') | length %}
        {% set hour = now().hour %}
        {% set minutes = now().minute %}
        {% macro min(X, Y) -%} {{X|int if X|int < Y|int else Y|int }} {%- endmacro %}
        {% if hour == 8 %}
          {{ min(solar, 32) if minutes < 30 else min(solar, 31) }}
        {% elif hour == 9 %}
          {{ min(solar, 30) if minutes < 30 else min(solar, 29) }}
        {% elif hour == 10 %}
          {{ min(solar, 28) if minutes < 30 else min(solar, 27) }}
        {% elif hour == 11 %}
          {{ min(solar, 26) if minutes < 30 else min(solar, 25) }}
        {% elif hour == 12 %}
          {{ min(solar, 24) if minutes < 30 else min(solar, 23) }}
        {% elif hour == 13 %}
          {{ min(solar, 22) if minutes < 30 else min(solar, 21) }}
        {% elif hour == 14 %}
          {{ min(solar, 20) if minutes < 30 else min(solar, 19) }}
        {% elif hour == 15 %}
          {{ min(solar, 18) if minutes < 30 else min(solar, 17) }}
        {% elif hour == 16 %}
          {{ min(solar, 16) if minutes < 30 else min(solar, 15) }}
        {% elif hour == 17 %}
          {{ min(solar, 14) if minutes < 30 else min(solar, 13) }}
        {% elif hour == 18 %}
          {{ min(solar, 12) if minutes < 30 else min(solar, 11) }}
        {% elif hour == 19 %}
          {{ min(solar, 10) if minutes < 30 else min(solar, 9) }}
        {% else %}
          {{ solar }}
        {% endif %}

    - name: Warmtepomp end timesteps
      unique_id: 2db655d5-f4d4-4687-a4e7-0029173bea99
      unit_of_measurement: 1/2u
      state: >
        {% set solar = state_attr('sensor.pv_power_forecast_list', 'list') | length %}
        {% set hour = now().hour %}
        {% set minutes = now().minute %}
        {% macro min(X, Y) -%} {{X|int if X|int < Y|int else Y|int }} {%- endmacro %}
        {% if hour == 8 %}
          {{ min(solar, 32) if minutes < 30 else min(solar, 31) }}
        {% elif hour == 9 %}
          {{ min(solar, 30) if minutes < 30 else min(solar, 29) }}
        {% elif hour == 10 %}
          {{ min(solar, 28) if minutes < 30 else min(solar, 27) }}
        {% elif hour == 11 %}
          {{ min(solar, 26) if minutes < 30 else min(solar, 25) }}
        {% elif hour == 12 %}
          {{ min(solar, 24) if minutes < 30 else min(solar, 23) }}
        {% elif hour == 13 %}
          {{ min(solar, 22) if minutes < 30 else min(solar, 21) }}
        {% elif hour == 14 %}
          {{ min(solar, 20) if minutes < 30 else min(solar, 19) }}
        {% elif hour == 15 %}
          {{ min(solar, 18) if minutes < 30 else min(solar, 17) }}
        {% elif hour == 16 %}
          {{ min(solar, 16) if minutes < 30 else min(solar, 15) }}
        {% elif hour == 17 %}
          {{ min(solar, 14) if minutes < 30 else min(solar, 13) }}
        {% elif hour == 18 %}
          {{ min(solar, 12) if minutes < 30 else min(solar, 11) }}
        {% elif hour == 19 %}
          {{ min(solar, 10) if minutes < 30 else min(solar, 9) }}
        {% else %}
          {{ solar }}
        {% endif %}

    - name: Days to retrieve
      unique_id: 175a282e-93d8-428a-b702-954438886b79
      unit_of_measurement: days
      state: >
        {% from 'easy_time.jinja' import count_the_days %}
        {% set days = count_the_days("2024-03-03 00:00:00") | int %}
        {{ (days * -1) - 1 }}
