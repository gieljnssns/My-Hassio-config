input_datetime:
  zwembad_start:
    name: "Zwembad starttijd"
    has_date: false
    has_time: true
    icon: mdi:clock-start
  zwembad_stop:
    name: "Zwembad stoptijd"
    has_date: false
    has_time: true
    icon: mdi:timer-off-outline
  zwembad_boost_stop:
    name: "Zwembad boost stoptijd"
    has_date: true
    has_time: true
    icon: mdi:timer-off-outline

sensor:
  - platform: history_stats
    name: Zwembadpomp aan vandaag
    entity_id: switch.zwembad
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"
    # start: "{{ as_local(states.sensor.time.last_changed).replace(hour=0, minute=0, second=0) }}"
    # end: "{{ as_local(states.sensor.time.last_changed) }}"

binary_sensor:
  - platform: template
    sensors:
      zwembadpomp_aan:
        value_template: "{{ is_state('switch.zwembad', 'on') }}"

input_select:
  zwembad_modus:
    name: "Zwembad"
    icon: mdi:pool
    options:
      - "Uit"
      - "Met zout"
      - "Boost"

automation:
  - alias: Zwembadpomp aan/uit
    id: f883618f-f74f-44a8-ae78-57202d9dbe01
    trigger:
      - platform: template
        value_template: >
          {{ states('sensor.time') == (state_attr('input_datetime.zwembad_start', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}
      - platform: template
        value_template: >
          {{ states('sensor.time') == (state_attr('input_datetime.zwembad_stop', 'timestamp') | int | timestamp_custom('%H:%M', False)) and states('input_select.zwembad_modus') != 'Boost' }}
      - platform: template
        value_template: >
          {{ states("sensor.date_time") == (state_attr('input_datetime.zwembad_boost_stop', 'timestamp') | int | timestamp_custom('%Y-%m-%d, %H:%M')) and states('input_select.zwembad_modus') == 'Boost' }}
        # {{ strptime(states("sensor.date_time"), '%Y-%m-%d, %H:%M:%S') == (state_attr('input_datetime.zwembad_boost_stop', 'timestamp') | int | timestamp_custom('%Y-%m-%d, %H:%M')) and states('input_select.zwembad_modus') == 'Boost' }}
    action:
      - service_template: >
          {% if states('sensor.time') == (state_attr('input_datetime.zwembad_start', 'timestamp') | int | timestamp_custom('%H:%M', False)) %}
            script.zwembadpomp_aan
          {% else %}
            script.zwembadpomp_uit
          {% endif %}
      - condition: template
        value_template: >
          {{ states("sensor.date_time") == (state_attr('input_datetime.zwembad_boost_stop', 'timestamp') | int | timestamp_custom('%Y-%m-%d, %H:%M')) }}
        # {{ strptime(states("sensor.date_time"), '%Y-%m-%d, %H:%M:%S') == (state_attr('input_datetime.zwembad_boost_stop', 'timestamp') | int | timestamp_custom('%Y-%m-%d, %H:%M')) }}
      - service: script.zwembad_met_zout

  - alias: Zwembad schema
    id: 97915615-db2a-48af-8f35-37e744f50896
    trigger:
      - platform: state
        entity_id: switch.zwembad
        to: "off"
        for:
          seconds: 20
      - platform: state
        entity_id: input_select.zwembad_modus
      - platform: state
        entity_id: switch.zwembad
        to: "unavailable"
        for:
          minutes: 5
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{as_timestamp(as_local(states.sensor.time.last_changed)) - as_timestamp(state_attr('automation.zwembad_schema', 'last_triggered')) | float > 30 }}"
    action:
      service_template: >
        {% if states('switch.zwembad') == 'unavailable' %}
          script.zwembad_uit
        {% else %}
          {% if states('input_select.zwembad_modus') == 'Met zout' %}
            script.zwembad_met_zout
          {% elif states('input_select.zwembad_modus') == 'Boost' %}
            script.zwembad_boost
          {% else %}
            script.zwembad_uit
          {% endif %}
        {% endif %}

script:
  zwembad_met_zout:
    sequence:
      - service: automation.turn_on
        entity_id: automation.zwembadpomp_aan_uit
      - service: input_datetime.set_datetime
        entity_id: input_datetime.zwembad_start
        data:
          time: "11:00"
      - service: input_datetime.set_datetime
        entity_id: input_datetime.zwembad_stop
        data:
          time: "19:00"
      - service: input_select.select_option
        data:
          entity_id: input_select.zwembad_modus
          option: "Met zout"

  zwembad_boost:
    sequence:
      - service: automation.turn_on
        entity_id: automation.zwembadpomp_aan_uit
      - service: script.zwembadpomp_aan
      - service: input_select.select_option
        data:
          entity_id: input_select.zwembad_modus
          option: "Boost"
      - service: input_datetime.set_datetime
        entity_id: input_datetime.zwembad_boost_stop
        data_template:
          datetime: >
            {{ (as_timestamp(as_local(states.sensor.time.last_changed))+ 176400) | timestamp_custom('%Y-%m-%d %H:%M:%S') }}

  zwembad_uit:
    sequence:
      - service: automation.turn_off
        entity_id: automation.zwembadpomp_aan_uit
      - service: script.zwembadpomp_uit
      - service: input_select.select_option
        data:
          entity_id: input_select.zwembad_modus
          option: "Uit"

  zwembadpomp_aan:
    sequence:
      - service: switch.turn_on
        entity_id: switch.zwembad

  zwembadpomp_uit:
    sequence:
      - service: switch.turn_off
        entity_id: switch.zwembad
