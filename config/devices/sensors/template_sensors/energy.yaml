- platform: template
  sensors:
    huidige_opbrengst:
      friendly_name: Huidige opbrengst
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {{ (states("sensor.s1_vermogen") | float(default=0) + states("sensor.s2_vermogen") | float(default=0) + states("sensor.s3_vermogen") | float(default=0)) | round(2) }}

    huidig_verbruik:
      friendly_name: Huidig verbruik
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {{ (states("sensor.v1_vermogen") | float(default=0) + states("sensor.v2_vermogen") | float(default=0) + states("sensor.v3_vermogen") | float(default=0)) | round(2) }}

    eigen_verbruik:
      friendly_name: Eigen verbruik
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {{ (states("sensor.l1_eigen_verbruik") | float(default=0) + states("sensor.l2_eigen_verbruik") | float(default=0) + states("sensor.l3_eigen_verbruik") | float(default=0)) | round(2) }}
      # value_template: >
      #   {% if (states("sensor.huidige_opbrengst") | float(default=0) - states("sensor.huidig_verbruik") | float(default=0)) >= 0 %}
      #       {{ (states("sensor.huidig_verbruik") | float(default=0)) | round(2)  }}
      #   {% elif (states("sensor.huidige_opbrengst") | float(default=0) - states("sensor.huidig_verbruik") | float(default=0)) < 0 and states("sensor.huidige_opbrengst") | float(default=0) > 0 %}
      #       {{ (states("sensor.huidige_opbrengst") | float(default=0)) | round(2)  }}
      #   {% else  %}
      #       {{ 0 | float(default=0) }}
      #   {% endif %}
    
    l1_eigen_verbruik:
      friendly_name: Eigen verbruik L1
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {% if (states("sensor.s1_vermogen") | float(default=0) - states("sensor.v1_vermogen") | float(default=0)) >= 0 %}
            {{ (states("sensor.v1_vermogen") | float(default=0)) | round(2)  }}
        {% elif (states("sensor.s1_vermogen") | float(default=0) - states("sensor.v1_vermogen") | float(default=0)) < 0 and states("sensor.huidige_opbrengst") | float(default=0) > 0 %}
            {{ (states("sensor.s1_vermogen") | float(default=0)) | round(2)  }}
        {% else  %}
            {{ 0 | float(default=0) }}
        {% endif %}

    l2_eigen_verbruik:
      friendly_name: Eigen verbruik L2
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {% if (states("sensor.s2_vermogen") | float(default=0) - states("sensor.v2_vermogen") | float(default=0)) >= 0 %}
            {{ (states("sensor.v2_vermogen") | float(default=0)) | round(2)  }}
        {% elif (states("sensor.s2_vermogen") | float(default=0) - states("sensor.v2_vermogen") | float(default=0)) < 0 and states("sensor.huidige_opbrengst") | float(default=0) > 0 %}
            {{ (states("sensor.s2_vermogen") | float(default=0)) | round(2)  }}
        {% else  %}
            {{ 0 | float(default=0) }}
        {% endif %}

    l3_eigen_verbruik:
      friendly_name: Eigen verbruik L3
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {% if (states("sensor.s3_vermogen") | float(default=0) - states("sensor.v3_vermogen") | float(default=0)) >= 0 %}
            {{ (states("sensor.v3_vermogen") | float(default=0)) | round(2)  }}
        {% elif (states("sensor.s3_vermogen") | float(default=0) - states("sensor.v3_vermogen") | float(default=0)) < 0 and states("sensor.huidige_opbrengst") | float(default=0) > 0 %}
            {{ (states("sensor.s3_vermogen") | float(default=0)) | round(2)  }}
        {% else  %}
            {{ 0 | float(default=0) }}
        {% endif %}

    huidig_fluivius:
      friendly_name: Fluvius
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {{ (states("sensor.l1_vermogen") | float(default=0) + states("sensor.l2_vermogen") | float(default=0) + states("sensor.l3_vermogen") | float(default=0)) | round(2) }}
    
    net_afname:
      friendly_name: Net afname
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {{ (states("sensor.l1_net_afname") | float(default=0) + states("sensor.l2_net_afname") | float(default=0) + states("sensor.l3_net_afname") | float(default=0)) | round(2) }}

    # grid_consumption:
    #   friendly_name: Net afname
    #   unit_of_measurement: "W"
    #   device_class: power
    #   value_template: >
    #     {%- if states("sensor.huidige_opbrengst") | float(default=0) < states("sensor.huidig_verbruik") | float(default=0) %}
    #         {{ (states("sensor.huidig_verbruik") | float(default=0) - states("sensor.huidige_opbrengst") | float(default=0)) | round(2) }}
    #     {%- elif states("sensor.huidige_opbrengst") | float(default=0) >= states("sensor.huidig_verbruik") | float(default=0) %}
    #         {{ 0 | float(default=0) }}
    #     {% endif %}

    net_terugsturen:
      friendly_name: Net productie
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {{ (states("sensor.l1_net_terugsturen") | float(default=0) + states("sensor.l2_net_terugsturen") | float(default=0) + states("sensor.l3_net_terugsturen") | float(default=0)) | round(2) }}
    
    # grid_production:
    #   friendly_name: Net terugsturen
    #   unit_of_measurement: "W"
    #   device_class: power
    #   value_template: >
    #     {%- if states("sensor.huidige_opbrengst") | float(default=0) <= states("sensor.huidig_verbruik") | float(default=0) %}
    #         {{ 0 | float(default=0) }}
    #     {%- elif states("sensor.huidige_opbrengst") | float(default=0) > states("sensor.huidig_verbruik") | float(default=0) %}
    #         {{ (states("sensor.huidige_opbrengst") | float(default=0) - states("sensor.huidig_verbruik") | float(default=0)) | round(2) }}
    #     {% endif %}

    grid_energy_consumption:
      friendly_name: Net afname
      unit_of_measurement: "kWh"
      device_class: energy
      value_template: >
        {%- if states("sensor.daily_solar") | float(default=0) < states("sensor.daily_energy") | float(default=0) %}
            {{ (states("sensor.daily_energy") | float(default=0) - states("sensor.daily_solar") | float(default=0))  | round(3)  }}
        {%- elif states("sensor.daily_solar") | float(default=0) > states("sensor.daily_energy") | float(default=0) %}
            {{ 0 | float(default=0) }}
        {% endif %}

    grid_energy_production:
      friendly_name: Net terugsturen
      unit_of_measurement: "kWh"
      device_class: energy
      value_template: >
        {%- if states("sensor.daily_solar") | float(default=0) <= states("sensor.daily_energy") | float(default=0) %}
            {{ 0 | float(default=0) }}
        {%- elif states("sensor.daily_solar") | float(default=0) > states("sensor.daily_energy") | float(default=0) %}
            {{ (states("sensor.daily_solar") | float(default=0) - states("sensor.daily_energy") | float(default=0))  | round(3) }}
        {% endif %}

    ###  Schijnbaar  ###
    # huidige_opbrengst_schijnbaar:
    #   friendly_name: Huidige schijnbare opbrengst
    #   unit_of_measurement: "VA"
    #   value_template: >
    #     {{ (states("sensor.s1_schijnbaar_vermogen") | float(default=0) + states("sensor.s2_schijnbaar_vermogen") | float(default=0) + states("sensor.s3_schijnbaar_vermogen") | float(default=0)) | round(2) }}

    # huidig_verbruik_schijnbaar:
    #   friendly_name: Huidig schijnbaar verbruik
    #   unit_of_measurement: "VA"
    #   value_template: >
    #     {{ (states("sensor.v1_schijnbaar_vermogen") | float(default=0) + states("sensor.v2_schijnbaar_vermogen") | float(default=0) + states("sensor.v3_schijnbaar_vermogen") | float(default=0)) | round(2) }}
    
    # huidige_fluvius_schijnbaar:
    #   friendly_name: Fluivius schijnbaar
    #   unit_of_measurement: "VA"
    #   value_template: >
    #     {{ (states("sensor.l1_schijnbaar_vermogen") | float(default=0) + states("sensor.l2_schijnbaar_vermogen") | float(default=0) + states("sensor.l3_schijnbaar_vermogen") | float(default=0)) | round(2) }}

    ###  Tests  ###
    # huidig_verbruik_test:
    #   friendly_name: Huidig verbruik test
    #   unit_of_measurement: "W"
    #   device_class: power
    #   value_template: >
    #     {{ (states("sensor.v1_vermogen_test2") | float(default=0) + states("sensor.v2_vermogen_test2") | float(default=0) + states("sensor.v3_vermogen_test2") | float(default=0)) | round(2) }}
    
    # eigen_verbruik_test:
    #   friendly_name: Eigen verbruik test
    #   unit_of_measurement: "W"
    #   device_class: power
    #   value_template: >
    #     {% if (states("sensor.huidige_opbrengst_test") | float(default=0) - states("sensor.huidig_verbruik_test") | float(default=0)) >= 0 %}
    #         {{ (states("sensor.huidig_verbruik_test") | float(default=0)) | round(2)  }}
    #     {% elif (states("sensor.huidige_opbrengst_test") | float(default=0) - states("sensor.huidig_verbruik_test") | float(default=0)) < 0 and states("sensor.huidige_opbrengst_test") | float(default=0) > 0 %}
    #         {{ (states("sensor.huidige_opbrengst_test") | float(default=0)) | round(2)  }}
    #     {% else  %}
    #         {{ 0 | float(default=0) }}
    #     {% endif %}

    # huidige_opbrengst_test:
    #   friendly_name: Huidige opbrengst test
    #   unit_of_measurement: "W"
    #   device_class: power
    #   value_template: >
    #     {{ (states("sensor.s1_vermogen_test2") | float(default=0) + states("sensor.s2_vermogen_test2") | float(default=0) + states("sensor.s3_vermogen_test2") | float(default=0)) | round(2) }}

    ###  Combinatie  ###
    verlichting_vermogen:
      friendly_name: Verlichting vermogen
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {{ (states("sensor.danszaal_luster_vermogen") | float(default=0) + 
            states("sensor.zithoek_luster_vermogen") | float(default=0) + 
            states("sensor.gang_boven_vermogen") | float(default=0) + 
            states("sensor.slaapkamer_hoog_vermogen") | float(default=0) + 
            states("sensor.keuken_inkom_vermogen") | float(default=0) + 
            states("sensor.keuken_spots_vermogen") | float(default=0) + 
            states("sensor.danszaal_spots_vermogen") | float(default=0) + 
            states("sensor.wc_vermogen") | float(default=0) + 
            states("sensor.garage_vermogen") | float(default=0) + 
            states("sensor.garage_werkbank_vermogen") | float(default=0) + 
            states("sensor.badkamer_hoog_vermogen") | float(default=0) + 
            states("sensor.badkamer_pombak_vermogen") | float(default=0) + 
            states("sensor.gang_beneden_vermogen") | float(default=0) + 
            states("sensor.keuken_luster_vermogen") | float(default=0) + 
            states("sensor.trap_vermogen") | float(default=0) + 
            states("sensor.verlichting_noor_template_power") | float(default=0) + 
            states("sensor.verlichting_fien_template_power") | float(default=0) + 
            states("sensor.verlichting_slaapkamer_spot_template_power") | float(default=0) + 
            states("sensor.verlichting_zithoek_spots_template_power") | float(default=0) + 
            states("sensor.verlichting_hof_template_power") | float(default=0) + 
            states("sensor.verlichting_terras_template_power") | float(default=0) + 
            states("sensor.waskot_vermogen") | float(default=0)) | round (3)}}

    verluchting_vermogen:
      friendly_name: Verluchting vermogen
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {{ (states("sensor.zolder_verluchting_template_power") | float(default=0) + 
            states("sensor.verluchting_template_power") | float(default=0) + 
            states("sensor.badkamer_verluchting_vermogen") | float(default=0)) | round (3)}}
    
    rest_vermogen:
      friendly_name: Vermogen van al de rest
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {{ ( states("sensor.huidig_verbruik") | float(default=0) 
            - states("sensor.warmtepomp_huidig_verbruik") | float(default=0) 
            - states("sensor.warmtepompboiler_huidig_verbruik") | float(default=0) 
            - states("sensor.verwarming_fien_template_power") | float(default=0) 
            - states("sensor.verwarming_noor_template_power") | float(default=0) 
            - states("sensor.verwarming_badkamer_template_power") | float(default=0) 
            - states("sensor.verwarming_slaapkamer_template_power") | float(default=0) 
            - states("sensor.verwarming_wc_template_power") | float(default=0) 
            - states("sensor.verwarming_bureau_template_power") | float(default=0) 
            - states("sensor.koffiezet_vermogen") | float(default=0) 
            - states("sensor.verlichting_vermogen") | float(default=0) 
            - states("sensor.verluchting_vermogen") | float(default=0) 
            - states("sensor.zwembad_alles_vermogen") | float(default=0) 
            - states("sensor.keuken_ijskast_vermogen") | float(default=0) 
            - states("sensor.regenwaterpomp_vermogen") | float(default=0) 
            - states("sensor.keuken_toestellen_vermogen") | float(default=0) 
            - states("sensor.afwasmachien_vermogen") | float(default=0) 
            - states("sensor.wasmachien_vermogen") | float(default=0) 
            - states("sensor.droogkast_vermogen") | float(default=0) )
            | round (2)
            }}
    
    ###  Percentages  ###
    percentage_eigen_verbruik_dagelijks:
      friendly_name: Eigen verbruik dagelijks
      unit_of_measurement: "%"
      value_template: >
        {% if states("sensor.daily_solar") | float(default=0) > 0 and (states("sensor.daily_own_consumption") | float(default=0) - states("sensor.daily_solar") | float(default=0)) <= 0 %}
          {{ (states("sensor.daily_own_consumption") | float(default=0) / states("sensor.daily_solar") | float(default=0) * 100 ) | round(2) }}
        {% else  %}
          {{ 100 | float(default=0) }}
        {% endif %} 
  
    percentage_eigen_verbruik_maandelijks:
      friendly_name: Eigen verbruik maandelijks
      unit_of_measurement: "%"
      value_template: >
        {% if states("sensor.monthly_solar") | float(default=0) > 0 and (states("sensor.monthly_own_consumption") | float(default=0) - states("sensor.monthly_solar") | float(default=0)) <= 0 %}
          {{ (states("sensor.monthly_own_consumption") | float(default=0) / states("sensor.monthly_solar") | float(default=0) * 100 ) | round(2) }}
        {% else  %}
          {{ 100 | float(default=0) }}
        {% endif %}    
    
    percentage_eigen_verbruik_jaarlijks:
      friendly_name: Eigen verbruik jaarlijks
      unit_of_measurement: "%"
      value_template: >
        {% if states("sensor.yearly_solar") | float(default=0) > 0 and (states("sensor.yearly_own_consumption") | float(default=0) - states("sensor.yearly_solar") | float(default=0)) <= 0 %}
          {{ (states("sensor.yearly_own_consumption") | float(default=0) / states("sensor.yearly_solar") | float(default=0) * 100 ) | round(2) }}
        {% else  %}
          {{ 100 | float(default=0) }}
        {% endif %}  

    ###  Capaciteitstarief  ###
    max_peak:
      friendly_name: Maximum piek
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {% set peak = (states.sensor.energie_kwartierpiek.state | float(default=0)) %}
        {% set max_peak = (states.input_number.max_peak.state | float(default=0)) %}
        {% macro max(X, Y) -%} {{X|float if X|float > Y|float else Y|float }} {%- endmacro %}
        {{ max(max_peak, peak) }}
    
    year_peak:
      friendly_name: Gemiddelde jaarpiek
      unit_of_measurement: "W"
      device_class: power
      value_template: >
        {{ (( states('input_number.january_peak') | float(default=0) +
              states('input_number.february_peak') | float(default=0) +
              states('input_number.march_peak') | float(default=0) +
              states('input_number.april_peak') | float(default=0) +
              states('input_number.may_peak') | float(default=0) +
              states('input_number.june_peak') | float(default=0) +
              states('input_number.july_peak') | float(default=0) +
              states('input_number.august_peak') | float(default=0) +
              states('input_number.september_peak') | float(default=0) +
              states('input_number.october_peak') | float(default=0) +
              states('input_number.november_peak') | float(default=0) +
              states('input_number.december_peak') | float(default=0) ) / 12) | round(2)
        }}
